{"ast":null,"code":"import * as ingredientAction from \"../actions/ingredientAction\";\nconst initialState = {\n  Ingredients: []\n};\n\nconst IngredientReducer = (state = initialState, action) => {\n  const {\n    type,\n    payload\n  } = action;\n  let newState = { ...state\n  };\n\n  switch (type) {\n    case ingredientAction.ADD_INGREDIENT:\n      {\n        return { ...newState,\n          Ingredients: [...newState.Ingredients, payload]\n        };\n      }\n\n    case ingredientAction.DELETE_INGREDIENT:\n      {\n        return { ...newState,\n          Ingredients: [...newState.Ingredients.filter(val => val !== payload)]\n        };\n      }\n\n    default:\n      return newState;\n  }\n};\n\n_c = IngredientReducer;\nexport default IngredientReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"IngredientReducer\");","map":{"version":3,"sources":["E:/cookbook-app/cookbook-app/src/redux/reducers/ingredientsReducer.js"],"names":["ingredientAction","initialState","Ingredients","IngredientReducer","state","action","type","payload","newState","ADD_INGREDIENT","DELETE_INGREDIENT","filter","val"],"mappings":"AAAA,OAAO,KAAKA,gBAAZ,MAAkC,6BAAlC;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE;AADM,CAArB;;AAIA,MAAMC,iBAAiB,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AAC1D,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;AAEA,MAAIG,QAAQ,GAAG,EAAE,GAAGJ;AAAL,GAAf;;AAEA,UAAQE,IAAR;AACE,SAAKN,gBAAgB,CAACS,cAAtB;AAAsC;AACpC,eAAO,EACL,GAAGD,QADE;AAELN,UAAAA,WAAW,EAAE,CAAC,GAAGM,QAAQ,CAACN,WAAb,EAA0BK,OAA1B;AAFR,SAAP;AAID;;AACD,SAAKP,gBAAgB,CAACU,iBAAtB;AAAyC;AACvC,eAAO,EACL,GAAGF,QADE;AAELN,UAAAA,WAAW,EAAE,CAAC,GAAGM,QAAQ,CAACN,WAAT,CAAqBS,MAArB,CAA6BC,GAAD,IAASA,GAAG,KAAKL,OAA7C,CAAJ;AAFR,SAAP;AAID;;AAED;AACE,aAAOC,QAAP;AAfJ;AAiBD,CAtBD;;KAAML,iB;AAwBN,eAAeA,iBAAf","sourcesContent":["import * as ingredientAction from \"../actions/ingredientAction\";\n\nconst initialState = {\n  Ingredients: [],\n};\n\nconst IngredientReducer = (state = initialState, action) => {\n  const { type, payload } = action;\n\n  let newState = { ...state };\n\n  switch (type) {\n    case ingredientAction.ADD_INGREDIENT: {\n      return {\n        ...newState,\n        Ingredients: [...newState.Ingredients, payload],\n      };\n    }\n    case ingredientAction.DELETE_INGREDIENT: {\n      return {\n        ...newState,\n        Ingredients: [...newState.Ingredients.filter((val) => val !== payload)],\n      };\n    }\n\n    default:\n      return newState;\n  }\n};\n\nexport default IngredientReducer;\n"]},"metadata":{},"sourceType":"module"}