{"ast":null,"code":"import * as recipeAction from \"../actions/recipesAction\";\nimport * as apiActions from \"../actions/apiAction\";\nimport { DeleteData, GetAllData, GetSingleData, PostData, PutData } from \"../../utility/apiService\";\nimport { Recipes } from \"../../utility/Endpoints\";\nconst initialState = {\n  recipes: [],\n  favourites: [],\n  hasRecipes: false,\n  currentRecipe: {\n    id: 0,\n    isFavourite: false,\n    name: \"\",\n    votes: 0,\n    imageUrl: \"\",\n    serving: 0,\n    ingredients: [],\n    steps: [],\n    cookTime: 0,\n    description: \"\"\n  }\n};\n\nconst recipesReducer = (state = initialState, action) => {\n  let {\n    type,\n    payload\n  } = action;\n  let newState = { ...state\n  };\n\n  switch (type) {\n    case recipeAction.LOAD_RECIPE:\n      {\n        newState = { ...newState,\n          hasRecipes: true,\n          recipes: [...payload]\n        };\n        return newState;\n      }\n\n    case recipeAction.LOAD_CURRENT_RECIPE:\n      {\n        newState = { ...newState,\n          currentRecipe: { ...payload\n          }\n        };\n        return newState;\n      }\n\n    case recipeAction.ADD_RECIPE:\n      {\n        payload = { ...payload,\n          isFavourite: false\n        };\n        newState = { ...newState,\n          recipes: [...newState.recipes, payload]\n        };\n        return newState;\n      }\n\n    case recipeAction.UPDATE_RECIPE:\n      {\n        let elemIndex = newState.recipes.findIndex(val => val.id == action.id);\n\n        if (elemIndex) {\n          let temp = [...newState.recipes];\n          temp[elemIndex] = { ...payload\n          };\n          newState = { ...newState,\n            recipes: [...temp]\n          };\n          return newState;\n        } else {\n          return newState;\n        }\n      }\n\n    case recipeAction.DELETE_RECIPE:\n      {\n        newState = { ...newState,\n          recipes: [...newState.recipes.filter(val => val.id != payload.id)]\n        };\n        return newState;\n      }\n\n    case recipeAction.MAKE_FAVOURITE:\n      {\n        const id = payload.id;\n        let elemIndex = newState.recipes.findIndex(val => val.id == id);\n\n        if (elemIndex) {\n          let temp = [...newState.recipes];\n          temp[elemIndex] = { ...temp[elemIndex],\n            isFavourite: true\n          };\n          newState = { ...newState,\n            favourites: newState.favourites.concat(id),\n            recipes: [...temp]\n          };\n          return newState;\n        } else {\n          return newState;\n        }\n      }\n\n    case recipeAction.REMOVE_FAVOURITE:\n      {\n        const id = payload.id;\n        let elemIndex = newState.recipes.findIndex(val => val.id == id);\n\n        if (elemIndex) {\n          let temp = [...newState.recipes];\n          temp[elemIndex] = { ...temp[elemIndex],\n            isFavourite: false\n          };\n          newState = { ...newState,\n            favourites: newState.favourites.filter(fav => fav != id),\n            recipes: [...temp]\n          };\n          return newState;\n        } else {\n          return newState;\n        }\n      }\n\n    default:\n      return newState;\n  }\n};\n/*\nexport const getSingleRecipe = (id) => {\n  return async (dispatch, getState) => {\n    try {\n      // let { recipes } = getState();\n      // recipes = recipes.recipes;\n      // // console.log(\"state at \", getState());\n\n      // if (!recipes || recipes.length < 1) {\n      //   // throw new Error(\"recipes are empty\");\n      //   console.log(\"Recipes are empty\");\n      // }\n\n      // const recipe = recipes.find((val) => val.id == id);\n\n      // if (!recipe) {\n      //   // throw new Error(\"Recipe Not Found\");\n      //   console.log(\"Recipe not Found\");\n      // }\n\n\n\n      dispatch(recipeAction.loadCurrentRecipe(recipe));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n};\n*/\n\n\nexport const fetchAllRecipes = () => {\n  return async dispatch => {\n    try {\n      await dispatch(apiActions.fetchRequest());\n      const result = await GetAllData(Recipes);\n      console.log(result);\n      const {\n        data\n      } = result;\n      console.log(\"recipes are \", data);\n      dispatch(apiActions.fetchSuccess(data));\n      dispatch(recipeAction.loadRecipe(data));\n    } catch (error) {\n      dispatch(apiActions.fetchError(error.message));\n    }\n  };\n};\nexport const fetchSingleRecipe = id => {\n  return async dispatch => {\n    try {\n      dispatch(apiActions.fetchRequest());\n      const result = await GetSingleData(Recipes, id);\n      console.log(\"recipe is \", result.data);\n      const {\n        data\n      } = result;\n      dispatch(apiActions.fetchSuccess(data));\n      dispatch(recipeAction.loadCurrentRecipe(data));\n      return data;\n    } catch (error) {\n      dispatch(apiActions.fetchError(error.message));\n    }\n  };\n};\nexport const addRecipe = recipe => async dispatch => {\n  try {\n    if (!recipe) {\n      throw new Error(\"Invalid Recipe Entered\");\n    }\n\n    dispatch(apiActions.fetchRequest());\n    const result = await PostData(Recipes, recipe);\n    console.log(\"recipe is \", result.data);\n    const {\n      data\n    } = result;\n    dispatch(apiActions.fetchSuccess(data));\n    dispatch(recipeAction.addRecipe(recipe));\n    return recipe;\n  } catch (error) {\n    dispatch(apiActions.fetchError(error.message));\n  }\n};\nexport const updateRecipe = recipe => async dispatch => {\n  try {\n    if (!recipe) {\n      throw new Error(\"Invalid Recipe Received\");\n    }\n\n    if (!recipe.id) {\n      throw new Error(\"Invalid id provided\");\n    }\n\n    const {\n      id\n    } = recipe;\n    dispatch(apiActions.fetchRequest());\n    const result = await PutData(Recipes, id, recipe);\n    console.log(\"recipe is \", result.data);\n    const {\n      data\n    } = result;\n    dispatch(apiActions.fetchSuccess(data));\n    dispatch(recipeAction.updateRecipe(recipe));\n    return recipe;\n  } catch (error) {\n    dispatch(apiActions.fetchError(error.message));\n  }\n};\nexport const deleteRecipe = id => async dispatch => {\n  try {\n    if (!id) {\n      throw new Error(\"id not found\");\n    }\n\n    dispatch(apiActions.fetchRequest());\n    const result = await DeleteData(Recipes, id);\n    console.log(\"recipe is \", result.data);\n    const {\n      data\n    } = result;\n    dispatch(apiActions.fetchSuccess(data));\n    dispatch(recipeAction.deleteRecipe(id));\n  } catch (error) {\n    dispatch(apiActions.fetchError(error.message));\n  }\n};\nexport const MakeFavourite = (recipe, id) => async (dispatch, getState) => {\n  try {\n    if (recipe) {\n      recipe = { ...recipe,\n        isFavourite: true\n      };\n      await dispatch(updateRecipe(recipe));\n      dispatch(recipeAction.makeFavourite(id));\n    }\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const RemoveFavourite = (recipe, id) => async (dispatch, getState) => {\n  try {\n    if (recipe) {\n      recipe = { ...recipe,\n        isFavourite: false\n      };\n      await dispatch(updateRecipe(recipe));\n      dispatch(recipeAction.removeFavourite(id));\n    }\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport default recipesReducer;","map":{"version":3,"sources":["E:/cookbook-app/cookbook-app/src/redux/reducers/recipesReducer.js"],"names":["recipeAction","apiActions","DeleteData","GetAllData","GetSingleData","PostData","PutData","Recipes","initialState","recipes","favourites","hasRecipes","currentRecipe","id","isFavourite","name","votes","imageUrl","serving","ingredients","steps","cookTime","description","recipesReducer","state","action","type","payload","newState","LOAD_RECIPE","LOAD_CURRENT_RECIPE","ADD_RECIPE","UPDATE_RECIPE","elemIndex","findIndex","val","temp","DELETE_RECIPE","filter","MAKE_FAVOURITE","concat","REMOVE_FAVOURITE","fav","fetchAllRecipes","dispatch","fetchRequest","result","console","log","data","fetchSuccess","loadRecipe","error","fetchError","message","fetchSingleRecipe","loadCurrentRecipe","addRecipe","recipe","Error","updateRecipe","deleteRecipe","MakeFavourite","getState","makeFavourite","RemoveFavourite","removeFavourite"],"mappings":"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","sourcesContent":["import * as recipeAction from \"../actions/recipesAction\";\nimport * as apiActions from \"../actions/apiAction\";\nimport {\n  DeleteData,\n  GetAllData,\n  GetSingleData,\n  PostData,\n  PutData,\n} from \"../../utility/apiService\";\nimport { Recipes } from \"../../utility/Endpoints\";\n\nconst initialState = {\n  recipes: [],\n  favourites: [],\n  hasRecipes: false,\n  currentRecipe: {\n    id: 0,\n    isFavourite: false,\n    name: \"\",\n    votes: 0,\n    imageUrl: \"\",\n    serving: 0,\n    ingredients: [],\n    steps: [],\n    cookTime: 0,\n    description: \"\",\n  },\n};\n\nconst recipesReducer = (state = initialState, action) => {\n  let { type, payload } = action;\n  let newState = { ...state };\n\n  switch (type) {\n    case recipeAction.LOAD_RECIPE: {\n      newState = {\n        ...newState,\n        hasRecipes: true,\n        recipes: [...payload],\n      };\n      return newState;\n    }\n    case recipeAction.LOAD_CURRENT_RECIPE: {\n      newState = {\n        ...newState,\n        currentRecipe: { ...payload },\n      };\n      return newState;\n    }\n    case recipeAction.ADD_RECIPE: {\n      payload = { ...payload, isFavourite: false };\n      newState = {\n        ...newState,\n        recipes: [...newState.recipes, payload],\n      };\n      return newState;\n    }\n    case recipeAction.UPDATE_RECIPE: {\n      let elemIndex = newState.recipes.findIndex((val) => val.id == action.id);\n      if (elemIndex) {\n        let temp = [...newState.recipes];\n        temp[elemIndex] = { ...payload };\n\n        newState = {\n          ...newState,\n          recipes: [...temp],\n        };\n\n        return newState;\n      } else {\n        return newState;\n      }\n    }\n    case recipeAction.DELETE_RECIPE: {\n      newState = {\n        ...newState,\n        recipes: [...newState.recipes.filter((val) => val.id != payload.id)],\n      };\n\n      return newState;\n    }\n    case recipeAction.MAKE_FAVOURITE: {\n      const id = payload.id;\n      let elemIndex = newState.recipes.findIndex((val) => val.id == id);\n      if (elemIndex) {\n        let temp = [...newState.recipes];\n\n        temp[elemIndex] = { ...temp[elemIndex], isFavourite: true };\n\n        newState = {\n          ...newState,\n          favourites: newState.favourites.concat(id),\n          recipes: [...temp],\n        };\n\n        return newState;\n      } else {\n        return newState;\n      }\n    }\n    case recipeAction.REMOVE_FAVOURITE: {\n      const id = payload.id;\n      let elemIndex = newState.recipes.findIndex((val) => val.id == id);\n      if (elemIndex) {\n        let temp = [...newState.recipes];\n\n        temp[elemIndex] = { ...temp[elemIndex], isFavourite: false };\n\n        newState = {\n          ...newState,\n          favourites: newState.favourites.filter((fav) => fav != id),\n          recipes: [...temp],\n        };\n\n        return newState;\n      } else {\n        return newState;\n      }\n    }\n\n    default:\n      return newState;\n  }\n};\n/*\nexport const getSingleRecipe = (id) => {\n  return async (dispatch, getState) => {\n    try {\n      // let { recipes } = getState();\n      // recipes = recipes.recipes;\n      // // console.log(\"state at \", getState());\n\n      // if (!recipes || recipes.length < 1) {\n      //   // throw new Error(\"recipes are empty\");\n      //   console.log(\"Recipes are empty\");\n      // }\n\n      // const recipe = recipes.find((val) => val.id == id);\n\n      // if (!recipe) {\n      //   // throw new Error(\"Recipe Not Found\");\n      //   console.log(\"Recipe not Found\");\n      // }\n\n\n\n      dispatch(recipeAction.loadCurrentRecipe(recipe));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n};\n*/\n\nexport const fetchAllRecipes = () => {\n  return async (dispatch) => {\n    try {\n      await dispatch(apiActions.fetchRequest());\n\n      const result = await GetAllData(Recipes);\n      console.log(result);\n      const { data } = result;\n\n      console.log(\"recipes are \", data);\n\n      dispatch(apiActions.fetchSuccess(data));\n      dispatch(recipeAction.loadRecipe(data));\n    } catch (error) {\n      dispatch(apiActions.fetchError(error.message));\n    }\n  };\n};\n\nexport const fetchSingleRecipe = (id) => {\n  return async (dispatch) => {\n    try {\n      dispatch(apiActions.fetchRequest());\n\n      const result = await GetSingleData(Recipes, id);\n      console.log(\"recipe is \", result.data);\n\n      const { data } = result;\n\n      dispatch(apiActions.fetchSuccess(data));\n      dispatch(recipeAction.loadCurrentRecipe(data));\n      return data;\n    } catch (error) {\n      dispatch(apiActions.fetchError(error.message));\n    }\n  };\n};\n\nexport const addRecipe = (recipe) => async (dispatch) => {\n  try {\n    if (!recipe) {\n      throw new Error(\"Invalid Recipe Entered\");\n    }\n\n    dispatch(apiActions.fetchRequest());\n\n    const result = await PostData(Recipes, recipe);\n    console.log(\"recipe is \", result.data);\n\n    const { data } = result;\n\n    dispatch(apiActions.fetchSuccess(data));\n\n    dispatch(recipeAction.addRecipe(recipe));\n    return recipe;\n  } catch (error) {\n    dispatch(apiActions.fetchError(error.message));\n  }\n};\n\nexport const updateRecipe = (recipe) => async (dispatch) => {\n  try {\n    if (!recipe) {\n      throw new Error(\"Invalid Recipe Received\");\n    }\n    if (!recipe.id) {\n      throw new Error(\"Invalid id provided\");\n    }\n\n    const { id } = recipe;\n\n    dispatch(apiActions.fetchRequest());\n\n    const result = await PutData(Recipes, id, recipe);\n    console.log(\"recipe is \", result.data);\n\n    const { data } = result;\n\n    dispatch(apiActions.fetchSuccess(data));\n\n    dispatch(recipeAction.updateRecipe(recipe));\n    return recipe;\n  } catch (error) {\n    dispatch(apiActions.fetchError(error.message));\n  }\n};\n\nexport const deleteRecipe = (id) => async (dispatch) => {\n  try {\n    if (!id) {\n      throw new Error(\"id not found\");\n    }\n\n    dispatch(apiActions.fetchRequest());\n\n    const result = await DeleteData(Recipes, id);\n    console.log(\"recipe is \", result.data);\n\n    const { data } = result;\n\n    dispatch(apiActions.fetchSuccess(data));\n\n    dispatch(recipeAction.deleteRecipe(id));\n  } catch (error) {\n    dispatch(apiActions.fetchError(error.message));\n  }\n};\n\nexport const MakeFavourite = (recipe, id) => async (dispatch, getState) => {\n  try {\n    if (recipe) {\n      recipe = {\n        ...recipe,\n        isFavourite: true,\n      };\n\n      await dispatch(updateRecipe(recipe));\n\n      dispatch(recipeAction.makeFavourite(id));\n    }\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const RemoveFavourite = (recipe, id) => async (dispatch, getState) => {\n  try {\n    if (recipe) {\n      recipe = {\n        ...recipe,\n        isFavourite: false,\n      };\n\n      await dispatch(updateRecipe(recipe));\n\n      dispatch(recipeAction.removeFavourite(id));\n    }\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport default recipesReducer;\n"]},"metadata":{},"sourceType":"module"}