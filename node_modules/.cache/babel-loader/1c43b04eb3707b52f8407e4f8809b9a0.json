{"ast":null,"code":"import * as recipeAction from \"../actions/recipesAction\";\nimport * as apiActions from \"../actions/apiAction\";\nimport { DeleteData, GetAllData, GetSingleData, PostData, PutData } from \"../../utility/apiService\";\nimport { Recipes } from \"../../utility/Endpoints\";\nconst initialState = {\n  recipes: [],\n  hasRecipes: false,\n  currentRecipe: {\n    id: 0,\n    isFavourite: false,\n    name: \"\",\n    votes: 0,\n    imageUrl: \"\",\n    serving: 0,\n    ingredients: [],\n    steps: [],\n    cookTime: 0,\n    description: \"\"\n  }\n};\n\nconst recipesReducer = (state = initialState, action) => {\n  let {\n    type,\n    payload\n  } = action;\n  let newState = { ...state\n  };\n\n  switch (type) {\n    case recipeAction.LOAD_RECIPE:\n      {\n        newState = { ...newState,\n          hasRecipes: true,\n          recipes: [...payload]\n        };\n        return newState;\n      }\n\n    case recipeAction.LOAD_CURRENT_RECIPE:\n      {\n        newState = { ...newState,\n          currentRecipe: { ...payload\n          }\n        };\n        return newState;\n      }\n\n    case recipeAction.ADD_RECIPE:\n      {\n        payload = { ...payload,\n          isFavourite: false\n        };\n        newState = { ...newState,\n          recipes: [...newState.recipes, payload]\n        };\n        return newState;\n      }\n\n    case recipeAction.UPDATE_RECIPE:\n      {\n        let elemIndex = newState.recipes.findIndex(val => val.id == action.id);\n\n        if (elemIndex) {\n          let temp = [...newState.recipes];\n          temp[elemIndex] = { ...payload\n          };\n          newState = { ...newState,\n            recipes: [...temp]\n          };\n          return newState;\n        } else {\n          return newState;\n        }\n      }\n\n    case recipeAction.DELETE_RECIPE:\n      {\n        newState = { ...newState,\n          recipes: [...newState.recipes.filter(val => val.id != payload.id)]\n        };\n        return newState;\n      }\n\n    case recipeAction.MAKE_FAVOURITE:\n      {\n        const id = payload.id;\n        let elemIndex = newState.recipes.findIndex(val => val.id == id);\n\n        if (elemIndex) {\n          let temp = [...newState.recipes];\n          temp[elemIndex] = { ...temp[elemIndex],\n            isFavourite: true\n          };\n          newState = { ...newState,\n            recipes: [...temp]\n          };\n          return newState;\n        } else {\n          return newState;\n        }\n      }\n\n    case recipeAction.REMOVE_FAVOURITE:\n      {\n        const id = payload.id;\n        let elemIndex = newState.recipes.findIndex(val => val.id == id);\n\n        if (elemIndex) {\n          let temp = [...newState.recipes];\n          temp[elemIndex] = { ...temp[elemIndex],\n            isFavourite: false\n          };\n          newState = { ...newState,\n            recipes: [...temp]\n          };\n          return newState;\n        } else {\n          return newState;\n        }\n      }\n\n    default:\n      return newState;\n  }\n};\n\nexport const fetchAllRecipes = () => {\n  return async dispatch => {\n    try {\n      await dispatch(apiActions.fetchRequest());\n      const result = await GetAllData(Recipes);\n      const {\n        data\n      } = result;\n      dispatch(apiActions.fetchSuccess(data));\n      dispatch(recipeAction.loadRecipe(data));\n      return data;\n    } catch (error) {\n      dispatch(apiActions.fetchError(error.message));\n    }\n  };\n};\nexport const fetchSingleRecipe = id => {\n  return async dispatch => {\n    try {\n      dispatch(apiActions.fetchRequest());\n      const result = await GetSingleData(Recipes, id);\n      const {\n        data\n      } = result;\n      dispatch(apiActions.fetchSuccess(data));\n      dispatch(recipeAction.loadCurrentRecipe(data));\n      return data;\n    } catch (error) {\n      dispatch(apiActions.fetchError(error.message));\n    }\n  };\n};\nexport const addRecipe = recipe => async dispatch => {\n  try {\n    if (!recipe) {\n      throw new Error(\"Invalid Recipe Entered\");\n    }\n\n    dispatch(apiActions.fetchRequest());\n    const result = await PostData(Recipes, recipe);\n    const {\n      data\n    } = result;\n    dispatch(apiActions.fetchSuccess(data));\n    dispatch(recipeAction.addRecipe(recipe));\n    return recipe;\n  } catch (error) {\n    dispatch(apiActions.fetchError(error.message));\n  }\n};\nexport const updateRecipe = recipe => async dispatch => {\n  try {\n    if (!recipe) {\n      throw new Error(\"Invalid Recipe Received\");\n    }\n\n    if (!recipe.id) {\n      throw new Error(\"Invalid id provided\");\n    }\n\n    const {\n      id\n    } = recipe;\n    dispatch(apiActions.fetchRequest());\n    const result = await PutData(Recipes, id, recipe);\n    const {\n      data\n    } = result;\n    dispatch(apiActions.fetchSuccess(data));\n    dispatch(recipeAction.updateRecipe(recipe));\n    return recipe;\n  } catch (error) {\n    dispatch(apiActions.fetchError(error.message));\n  }\n};\nexport const deleteRecipe = id => async dispatch => {\n  try {\n    if (!id) {\n      throw new Error(\"id not found\");\n    }\n\n    dispatch(apiActions.fetchRequest());\n    const result = await DeleteData(Recipes, id);\n    const {\n      data\n    } = result;\n    dispatch(apiActions.fetchSuccess(data));\n    dispatch(recipeAction.deleteRecipe(id));\n  } catch (error) {\n    dispatch(apiActions.fetchError(error.message));\n  }\n};\nexport const MakeFavourite = (recipe, id) => async (dispatch, getState) => {\n  try {\n    if (recipe) {\n      recipe = { ...recipe,\n        isFavourite: true\n      };\n      await dispatch(updateRecipe(recipe));\n      dispatch(recipeAction.makeFavourite(id));\n    }\n  } catch (error) {//console.log(error.message);\n  }\n};\nexport const RemoveFavourite = (recipe, id) => async (dispatch, getState) => {\n  try {\n    if (recipe) {\n      recipe = { ...recipe,\n        isFavourite: false\n      };\n      await dispatch(updateRecipe(recipe));\n      const res = dispatch(recipeAction.removeFavourite(id));\n    }\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport default recipesReducer;","map":{"version":3,"sources":["E:/cookbook-app/cookbook-app/src/redux/reducers/recipesReducer.js"],"names":["recipeAction","apiActions","DeleteData","GetAllData","GetSingleData","PostData","PutData","Recipes","initialState","recipes","hasRecipes","currentRecipe","id","isFavourite","name","votes","imageUrl","serving","ingredients","steps","cookTime","description","recipesReducer","state","action","type","payload","newState","LOAD_RECIPE","LOAD_CURRENT_RECIPE","ADD_RECIPE","UPDATE_RECIPE","elemIndex","findIndex","val","temp","DELETE_RECIPE","filter","MAKE_FAVOURITE","REMOVE_FAVOURITE","fetchAllRecipes","dispatch","fetchRequest","result","data","fetchSuccess","loadRecipe","error","fetchError","message","fetchSingleRecipe","loadCurrentRecipe","addRecipe","recipe","Error","updateRecipe","deleteRecipe","MakeFavourite","getState","makeFavourite","RemoveFavourite","res","removeFavourite","console","log"],"mappings":"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","sourcesContent":["import * as recipeAction from \"../actions/recipesAction\";\nimport * as apiActions from \"../actions/apiAction\";\nimport {\n  DeleteData,\n  GetAllData,\n  GetSingleData,\n  PostData,\n  PutData,\n} from \"../../utility/apiService\";\nimport { Recipes } from \"../../utility/Endpoints\";\n\nconst initialState = {\n  recipes: [],\n\n  hasRecipes: false,\n  currentRecipe: {\n    id: 0,\n    isFavourite: false,\n    name: \"\",\n    votes: 0,\n    imageUrl: \"\",\n    serving: 0,\n    ingredients: [],\n    steps: [],\n    cookTime: 0,\n    description: \"\",\n  },\n};\n\nconst recipesReducer = (state = initialState, action) => {\n  let { type, payload } = action;\n  let newState = { ...state };\n\n  switch (type) {\n    case recipeAction.LOAD_RECIPE: {\n      newState = {\n        ...newState,\n        hasRecipes: true,\n        recipes: [...payload],\n      };\n      return newState;\n    }\n    case recipeAction.LOAD_CURRENT_RECIPE: {\n      newState = {\n        ...newState,\n        currentRecipe: { ...payload },\n      };\n      return newState;\n    }\n    case recipeAction.ADD_RECIPE: {\n      payload = { ...payload, isFavourite: false };\n      newState = {\n        ...newState,\n        recipes: [...newState.recipes, payload],\n      };\n      return newState;\n    }\n    case recipeAction.UPDATE_RECIPE: {\n      let elemIndex = newState.recipes.findIndex((val) => val.id == action.id);\n      if (elemIndex) {\n        let temp = [...newState.recipes];\n        temp[elemIndex] = { ...payload };\n\n        newState = {\n          ...newState,\n          recipes: [...temp],\n        };\n\n        return newState;\n      } else {\n        return newState;\n      }\n    }\n    case recipeAction.DELETE_RECIPE: {\n      newState = {\n        ...newState,\n        recipes: [...newState.recipes.filter((val) => val.id != payload.id)],\n      };\n\n      return newState;\n    }\n    case recipeAction.MAKE_FAVOURITE: {\n      const id = payload.id;\n      let elemIndex = newState.recipes.findIndex((val) => val.id == id);\n      if (elemIndex) {\n        let temp = [...newState.recipes];\n\n        temp[elemIndex] = { ...temp[elemIndex], isFavourite: true };\n\n        newState = {\n          ...newState,\n\n          recipes: [...temp],\n        };\n\n        return newState;\n      } else {\n        return newState;\n      }\n    }\n    case recipeAction.REMOVE_FAVOURITE: {\n      const id = payload.id;\n      let elemIndex = newState.recipes.findIndex((val) => val.id == id);\n      if (elemIndex) {\n        let temp = [...newState.recipes];\n\n        temp[elemIndex] = { ...temp[elemIndex], isFavourite: false };\n\n        newState = {\n          ...newState,\n\n          recipes: [...temp],\n        };\n\n        return newState;\n      } else {\n        return newState;\n      }\n    }\n\n    default:\n      return newState;\n  }\n};\n\nexport const fetchAllRecipes = () => {\n  return async (dispatch) => {\n    try {\n      await dispatch(apiActions.fetchRequest());\n\n      const result = await GetAllData(Recipes);\n      const { data } = result;\n\n      dispatch(apiActions.fetchSuccess(data));\n      dispatch(recipeAction.loadRecipe(data));\n      return data;\n    } catch (error) {\n      dispatch(apiActions.fetchError(error.message));\n    }\n  };\n};\n\nexport const fetchSingleRecipe = (id) => {\n  return async (dispatch) => {\n    try {\n      dispatch(apiActions.fetchRequest());\n      const result = await GetSingleData(Recipes, id);\n      const { data } = result;\n      dispatch(apiActions.fetchSuccess(data));\n      dispatch(recipeAction.loadCurrentRecipe(data));\n      return data;\n    } catch (error) {\n      dispatch(apiActions.fetchError(error.message));\n    }\n  };\n};\n\nexport const addRecipe = (recipe) => async (dispatch) => {\n  try {\n    if (!recipe) {\n      throw new Error(\"Invalid Recipe Entered\");\n    }\n    dispatch(apiActions.fetchRequest());\n    const result = await PostData(Recipes, recipe);\n    const { data } = result;\n    dispatch(apiActions.fetchSuccess(data));\n    dispatch(recipeAction.addRecipe(recipe));\n    return recipe;\n  } catch (error) {\n    dispatch(apiActions.fetchError(error.message));\n  }\n};\n\nexport const updateRecipe = (recipe) => async (dispatch) => {\n  try {\n    if (!recipe) {\n      throw new Error(\"Invalid Recipe Received\");\n    }\n    if (!recipe.id) {\n      throw new Error(\"Invalid id provided\");\n    }\n\n    const { id } = recipe;\n\n    dispatch(apiActions.fetchRequest());\n\n    const result = await PutData(Recipes, id, recipe);\n\n    const { data } = result;\n\n    dispatch(apiActions.fetchSuccess(data));\n\n    dispatch(recipeAction.updateRecipe(recipe));\n    return recipe;\n  } catch (error) {\n    dispatch(apiActions.fetchError(error.message));\n  }\n};\n\nexport const deleteRecipe = (id) => async (dispatch) => {\n  try {\n    if (!id) {\n      throw new Error(\"id not found\");\n    }\n    dispatch(apiActions.fetchRequest());\n    const result = await DeleteData(Recipes, id);\n    const { data } = result;\n    dispatch(apiActions.fetchSuccess(data));\n\n    dispatch(recipeAction.deleteRecipe(id));\n  } catch (error) {\n    dispatch(apiActions.fetchError(error.message));\n  }\n};\n\nexport const MakeFavourite = (recipe, id) => async (dispatch, getState) => {\n  try {\n    if (recipe) {\n      recipe = {\n        ...recipe,\n        isFavourite: true,\n      };\n\n      await dispatch(updateRecipe(recipe));\n\n      dispatch(recipeAction.makeFavourite(id));\n    }\n  } catch (error) {\n    //console.log(error.message);\n  }\n};\n\nexport const RemoveFavourite = (recipe, id) => async (dispatch, getState) => {\n  try {\n    if (recipe) {\n      recipe = {\n        ...recipe,\n        isFavourite: false,\n      };\n\n      await dispatch(updateRecipe(recipe));\n\n      const res = dispatch(recipeAction.removeFavourite(id));\n    }\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n\n\nexport default recipesReducer;\n"]},"metadata":{},"sourceType":"module"}